// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/test;
import ballerina/oauth2;
import ballerina/http;
//import ballerina/io;

configurable string clientId = ?;
configurable string clientSecret = ?;
configurable string refreshToken = ?;

OAuth2RefreshTokenGrantConfig auth = {
       clientId: clientId,
       clientSecret: clientSecret,
       refreshToken: refreshToken,
       credentialBearer: oauth2:POST_BODY_BEARER // this line should be added in to when you are going to create auth object.
   };

ConnectionConfig config = {auth};
final Client taxes = check new Client(config);

@test:Config {
    groups: ["Basic"]}
isolated function  testPostTax() returns error? {
    SimplePublicObjectInputForCreate payload = {
        "associations": [],
        "properties": {
            "hs_label": "A percentage-based tax of 8.5%",
            "hs_value": "8.5000",
            "hs_type": "PERCENT"
        }
    };

    SimplePublicObject|error response = check taxes->/.post(payload);

    test:assertTrue(response is SimplePublicObject, "Tax is not created");
}

@test:Config {
    groups: ["Basic"]}
isolated function  testGetTaxList() returns error?{

    GetCrmV3ObjectsTaxes_getpageQueries params = {
        'limit: 5,
        properties: ["hs_value", "hs_type", "hs_label"]
    };

    CollectionResponseSimplePublicObjectWithAssociationsForwardPaging|error response = check taxes->/.get({}, params);
    if response is CollectionResponseSimplePublicObjectWithAssociationsForwardPaging{
        test:assertNotEquals(response.results[0].id, (), "Tax id's are not found");
        test:assertNotEquals(response.results[0].properties, (), "Tax properties are not found");
        test:assertNotEquals(response.results[0].properties["hs_type"], (), "Tax label is not found");
        test:assertNotEquals(response.results[0].properties["hs_value"], (), "Tax value is not found");
        test:assertNotEquals(response.results[0].properties["hs_label"], (), "Tax type is not found");
        test:assertTrue(response.results.length()<=5, "Tax list is not found");

    }
    else{
        test:assertFail("Error occured while fetching tax list");
    }
}

@test:Config {
    groups: ["Basic"]}
isolated function  testGetTaxbyID() returns error?{

    GetCrmV3ObjectsTaxesTaxid_getbyidQueries params = {
        properties: ["hs_value", "hs_type", "hs_label"]
    };

    final string taxId = "394396506962";

    SimplePublicObjectWithAssociations|error response = check taxes->/[taxId].get({}, params);

    if response is SimplePublicObjectWithAssociations{

        SimplePublicObjectWithAssociations testResponse = {
            "createdAt":"2025-01-02T09:32:56.171Z",
            "archived":false,
            "id":"394396506962",
            "properties":{
                "hs_label":"A percentage-based tax of 7.5%",
                "hs_value":"7.5000",
                "hs_lastmodifieddate":"2025-01-02T15:06:12.727Z",
                "hs_createdate":"2025-01-02T09:32:56.171Z",
                "hs_object_id":"394396506962",
                "hs_type":"PERCENT"
            },
            "updatedAt":"2025-01-02T15:06:12.727Z"};
        test:assertEquals(response, testResponse);
    }
    else{
        test:assertFail("Error occured while fetching tax by id");
    }
}

@test:Config {
    groups: ["Basic"]}
isolated function  testDeleteTaxbyID() returns error?{

    final string taxId = "395045858166";

    http:Response|error response = check taxes->/[taxId].delete();

    if(response is http:Response){
        test:assertEquals(response.statusCode, 204, "Tax is not deleted");
    }
    else{
        test:assertFail("Error occured while deleting tax");
    }
}

@test:Config {
    groups: ["Basic"]}
isolated function  testPatchTaxbyID() returns error? {

    final string taxId = "394423055752";

    SimplePublicObjectInput payload = {
        "properties": {
            "hs_label": "A percentage-based tax of 6.75%",
            "hs_value": "6.7500",
            "hs_type": "PERCENT"
        }
    };

    SimplePublicObject|error response = check taxes->/[taxId].patch(payload);

    if (response is SimplePublicObject){
        test:assertEquals(response.properties["hs_label"], "A percentage-based tax of 6.75%", "Tax label is not updated");
        test:assertEquals(response.properties["hs_value"], "6.7500", "Tax value is not updated");
        test:assertEquals(response.properties["hs_type"], "PERCENT", "Tax type is not updated");
    }
    else{
        test:assertFail("Error occured while updating tax");
    }
}

@test:Config {}
isolated function  testPostBatchUpsert() returns error? {
}

@test:Config {
    groups: ["Batch"]
}
isolated function  testPostBatchUpdate() returns error? {

    BatchInputSimplePublicObjectBatchInput payload = {
        inputs: [
            {
                "id": "395102392355",
                "properties": {
                    "hs_label": "A percentage-based tax of 3.5%",
                    "hs_value": "3.5000",
                    "hs_type": "PERCENT"
                }
            },
            {
                "id": "395102392356",
                "properties": {
                    "hs_label": "A percentage-based tax of 3.75%",
                    "hs_value": "3.7500",
                    "hs_type": "PERCENT"
                }
            }
        ]
    };

    BatchResponseSimplePublicObject|BatchResponseSimplePublicObjectWithErrors|error response = check taxes->/batch/update.post(payload, {});

    if (!(response is BatchResponseSimplePublicObject)){
        test:assertFail("Error occured while batch updating taxes");
    }

    test:assertEquals(response.status, "COMPLETE", "Batch update failed");
    test:assertEquals(response.results.length(), 2, "Not all the taxes are updated");
    test:assertNotEquals(response.results[0].id, () , "Id of an updated tax is null");
    test:assertNotEquals(response.results[1].id, (), "Id of an updated tax is null");

    foreach var result in response.results {

        string id = result.id;
        string expectedLabel = id == "395102392355" ? "A percentage-based tax of 3.5%" : "A percentage-based tax of 3.75%";
        string expectedValue = id == "395102392355" ? "3.5000" : "3.7500";
        test:assertEquals(result.properties["hs_label"], expectedLabel, "Tax label is not updated");
        test:assertEquals(result.properties["hs_value"], expectedValue, "Tax value is not updated");
    }
}

@test:Config {
    groups: ["Batch"]
}
isolated function  testPostBatchRead() returns error? {

    BatchReadInputSimplePublicObjectId payload = {
        inputs: [{id:"394396506962"}, {id:"394423055752"}, {id:"394438117556"}],
        properties: ["hs_value", "hs_type", "hs_label"],
        propertiesWithHistory: ["hs_value", "hs_type", "hs_label"]
    };

    BatchResponseSimplePublicObject|BatchResponseSimplePublicObjectWithErrors|error response = check taxes->/batch/read.post(payload, {});

    if (response is BatchResponseSimplePublicObject){

        test:assertEquals(response.results.length(),3, "Not all the taxes are fetched");
        test:assertNotEquals(response.results[0].id,(), "Id of a fetched tax is null");
        test:assertNotEquals(response.results[1].properties, (), "properties of a fetched tax is null");
        test:assertNotEquals(response.results[2].propertiesWithHistory, (), "propertiesWithHistory of a fetched tax is null");
    }
    else{
        test:assertFail("Error occured while batch reading taxes");
    }

}

@test:Config {
    groups: ["Batch"]}
isolated function  testPostBatchcreate() returns error? {

    BatchInputSimplePublicObjectInputForCreate payload = {
        inputs: [
            {
                "associations": [],
                "properties": {
                    "hs_label": "A percentage-based tax of 2.5%",
                    "hs_value": "2.5000",
                    "hs_type": "PERCENT"
                }
            },
            {
                "associations": [],
                "properties": {
                    "hs_label": "A percentage-based tax of 2.75%",
                    "hs_value": "2.7500",
                    "hs_type": "PERCENT"
                }
            }
        ]
    };

    BatchResponseSimplePublicObject|BatchResponseSimplePublicObjectWithErrors|error response = check taxes->/batch/create.post(payload, {});

    if (response is BatchResponseSimplePublicObject){

        test:assertEquals(response.status, "COMPLETE", "Batch create failed");
        test:assertEquals(response.results.length(), 2, "Not all the taxes are created");
        test:assertNotEquals(response.results[0].id, () , "Id of a created tax is null");   
    }
    else{
        test:assertFail("Error occured while batch creating taxes");
    }

}

@test:Config {
    groups: ["Search"]
}
isolated function  testPostSearch() returns error? {
    PublicObjectSearchRequest payload = {
        sorts: ["hs_value"],
        query: "A percentage-based tax",
        'limit: 10,
        properties: ["hs_label", "hs_value", "hs_type"]
    };

    CollectionResponseWithTotalSimplePublicObjectForwardPaging|error response = check taxes->/search.post(payload, {});

    if response is CollectionResponseWithTotalSimplePublicObjectForwardPaging{
        test:assertNotEquals(response.results,[], "No search results found");
        test:assertTrue(response.results.length() <= 10, "Limit Exceeded");

        foreach SimplePublicObject result in response.results { 

            test:assertNotEquals(result.id, (), "Tax ID is not found");
            test:assertNotEquals(result.properties, (), "Tax properties are not found");
            test:assertNotEquals(result.properties["hs_type"], (), "Tax type is not found");
            test:assertNotEquals(result.properties["hs_value"], (), "Tax value is not found");
        }

    }else {
        test:assertFail("Error occurred while searching discounts");
    }
}

@test:Config {
    groups: ["Batch"]
}
isolated function  testPostBatchArchive() returns error? {

    BatchInputSimplePublicObjectId payload = {
        inputs: [{id:"395097764105"}, {id:"395097764104"}]
    };

    http:Response|error response = check taxes->/batch/archive.post(payload, {});

    if (response is http:Response){
        test:assertEquals(response.statusCode, 204, "Batch archive failed");
    }
    else{
        test:assertFail("Error occured while batch archiving taxes");
    }
}
